using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace Bram.Lego {
	public partial class NxtSonar : NxtSensor {
		public NxtSonar() {
			InitializeComponent();
		}

		public NxtSonar(IContainer container) {
			container.Add(this);

			InitializeComponent();
		}


		/// <summary>
		/// Use the boolean mode
		/// </summary>
		protected override NxtSensorMode Mode {
			get {
				return NxtSensorMode.Raw;
			}
		}

		/// <summary>
		/// Type of this sensor
		/// </summary>
		protected override NxtSensorType Type {
			get {
				return NxtSensorType.LowSpeed_9V;
			}
		}

		/// <summary>
		/// The raw value of this sensor reading
		/// </summary>
		public override int RawValue {
			get {
				return _rawValue;
			}
		}
		int _rawValue = 0;

		/// <summary>
		/// Initializes the sonar sensor
		/// </summary>
		public override void InitSensor() {
			base.InitSensor();

			//int status = Brick.Comm.LSGetStatus(Port);
			// Read garbage
			Brick.Comm.LSRead(Port);
			// Init continuous mode
			Brick.Comm.I2CSetByte(Port, (byte)NxtSonarRegister.Mode, 0x02);

		}

		/// <summary>
		/// Reads information from the sonar sensor
		/// </summary>
		public override void Poll() {
			if(Brick != null) {
				int previous = RawValue;
				_rawValue = readSonar();
				OnPolled();
				if(previous != RawValue) {
					OnValueChanged();
				}
			}
		}

		/// <summary>
		/// reads a value from the sonar
		/// </summary>
		/// <returns></returns>
		private int readSonar() {
			return 0;
			return Brick.Comm.I2CGetByte(Port, (byte)NxtSonarRegister.MeasurementByte0);
		}


		/*
		 sub initialize_ultrasound_port
{
  my ($this,$port) = @_;
  $this->set_input_mode($RET,$port,$LOWSPEED_9V,$RAWMODE); 
}

sub get_ultrasound_measurement_units
{
  my ($this,$port) = @_;
  return $this->ls_request_response($port,2,7,pack("CC",0x02,0x14));
}

sub get_ultrasound_measurement_byte
{
  my ($this,$port,$byte) = @_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x42+$byte));
}

sub get_ultrasound_continuous_measurement_interval
{
  my ($this,$port)=@_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x40));
}

sub get_ultrasound_read_command_state
{
  my ($this,$port) = @_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x41));
}

sub get_ultrasound_actual_zero
{
  my ($this,$port) = @_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x50));
}

sub get_ultrasound_actual_scale_factor
{
  my ($this,$port) = @_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x51));
}

sub get_ultrasound_actual_scale_divisor
{
  my ($this,$port) = @_;
  return $this->ls_request_response($port,2,1,pack("CC",0x02,0x52));
}

sub set_ultrasound_off
{
  my ($this,$port) = @_;
  return $this->ls_write($RET,$port,3,0,pack("CCC",0x02,0x41,0x00));
}

sub set_ultrasound_single_shot
{
  my ($this,$port) = @_;
  return $this->ls_write($RET,$port,3,0,pack("CCC",0x02,0x41,0x01));
}

sub set_ultrasound_continuous_measurement
{
  my ($this,$port) = @_;
  return $this->ls_write($RET,$port,3,0,pack("CCC",0x02,0x41,0x02));
}

=head2 set_ultrasound_event_capture_mode

$conn->set_ultrasound_event_capture_mode($NXT::SENSOR_4);

In this mode the US sensor will detect only other ultrasound sensors in the vicinity.

=cut

sub set_ultrasound_event_capture_mode
{
  my ($this,$port) = @_;
  return $this->ls_write($RET,$port,3,0,pack("CCC",0x02,0x41,0x03)); 
}

sub ultrasound_request_warm_reset
{
  my ($this,$port) = @_;
  return $this->ls_write($RET,$port,3,0,pack("CCC",0x02,0x41,0x04));
}

sub set_ultrasound_continuous_measurement_interval
{
  my ($this,$port,$interval) = @_;
  return $this->ls_write($RET,3,0,pack("CCC",0x02,0x40,$interval));
}

sub set_ultrasound_actual_zero
{
  my ($this,$port,$value) = @_;
  return $this->ls_write($port,3,0,pack("CCC",0x02,0x50,$value));
}

sub set_ultrasound_actual_scale_factor
{
  my ($this,$port,$value) = @_;
  return $this->ls_write($port,3,0,pack("CCC",0x02,0x51,$value));
}

sub set_ultrasound_actual_scale_divisor
{
  my ($this,$port,$value) = @_;
  return $this->ls_write($port,3,0,pack("CCC",0x02,0x52,$value));
} 
		 
		*/
	}


	public enum NxtSonarRegister {
		MeasurementUnits = 0x14,
		PollInterval = 0x40,
		Mode = 0x41,
		MeasurementByte0 = 0x42,
		MeasurementByte1 = 0x43,
		MeasurementByte2 = 0x44,
		MeasurementByte3 = 0x45,
		MeasurementByte4 = 0x46,
		MeasurementByte5 = 0x47,
		MeasurementByte6 = 0x48
	}
}
